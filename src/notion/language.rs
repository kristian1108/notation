use std::fmt;
use std::str::FromStr;

use anyhow::anyhow;
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, PartialEq)]
pub enum NotionCodeLanguage {
    Abap,
    Agda,
    Arduino,
    Assembly,
    Bash,
    Basic,
    Bnf,
    C,
    CSharp,
    CPlusPlus,
    Clojure,
    Coffeescript,
    Coq,
    Css,
    Dart,
    Dhall,
    Diff,
    Docker,
    Ebnf,
    Elixir,
    Elm,
    Erlang,
    FSharp,
    Flow,
    Fortran,
    Gherkin,
    Glsl,
    Go,
    Graphql,
    Groovy,
    Haskell,
    Html,
    Idris,
    Java,
    Javascript,
    Json,
    Julia,
    Kotlin,
    Latex,
    Less,
    Lisp,
    Livescript,
    LlvmIr,
    Lua,
    Makefile,
    Markdown,
    Markup,
    Matlab,
    Mathematica,
    Mermaid,
    Nix,
    NotionFormula,
    ObjectiveC,
    Ocaml,
    Pascal,
    Perl,
    Php,
    PlainText,
    Powershell,
    Prolog,
    Protobuf,
    Purescript,
    Python,
    R,
    Racket,
    Reason,
    Ruby,
    Rust,
    Sass,
    Scala,
    Scheme,
    Scss,
    Shell,
    Solidity,
    Sql,
    Swift,
    Toml,
    Typescript,
    VbNet,
    Verilog,
    Vhdl,
    VisualBasic,
    Webassembly,
    Xml,
    Yaml,
    JavaCCPlusPlusCSharp,
}

impl fmt::Display for NotionCodeLanguage {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let s = match self {
            NotionCodeLanguage::Abap => "abap",
            NotionCodeLanguage::Agda => "agda",
            NotionCodeLanguage::Arduino => "arduino",
            NotionCodeLanguage::Assembly => "assembly",
            NotionCodeLanguage::Bash => "bash",
            NotionCodeLanguage::Basic => "basic",
            NotionCodeLanguage::Bnf => "bnf",
            NotionCodeLanguage::C => "c",
            NotionCodeLanguage::CSharp => "c#",
            NotionCodeLanguage::CPlusPlus => "c++",
            NotionCodeLanguage::Clojure => "clojure",
            NotionCodeLanguage::Coffeescript => "coffeescript",
            NotionCodeLanguage::Coq => "coq",
            NotionCodeLanguage::Css => "css",
            NotionCodeLanguage::Dart => "dart",
            NotionCodeLanguage::Dhall => "dhall",
            NotionCodeLanguage::Diff => "diff",
            NotionCodeLanguage::Docker => "docker",
            NotionCodeLanguage::Ebnf => "ebnf",
            NotionCodeLanguage::Elixir => "elixir",
            NotionCodeLanguage::Elm => "elm",
            NotionCodeLanguage::Erlang => "erlang",
            NotionCodeLanguage::FSharp => "f#",
            NotionCodeLanguage::Flow => "flow",
            NotionCodeLanguage::Fortran => "fortran",
            NotionCodeLanguage::Gherkin => "gherkin",
            NotionCodeLanguage::Glsl => "glsl",
            NotionCodeLanguage::Go => "go",
            NotionCodeLanguage::Graphql => "graphql",
            NotionCodeLanguage::Groovy => "groovy",
            NotionCodeLanguage::Haskell => "haskell",
            NotionCodeLanguage::Html => "html",
            NotionCodeLanguage::Idris => "idris",
            NotionCodeLanguage::Java => "java",
            NotionCodeLanguage::Javascript => "javascript",
            NotionCodeLanguage::Json => "json",
            NotionCodeLanguage::Julia => "julia",
            NotionCodeLanguage::Kotlin => "kotlin",
            NotionCodeLanguage::Latex => "latex",
            NotionCodeLanguage::Less => "less",
            NotionCodeLanguage::Lisp => "lisp",
            NotionCodeLanguage::Livescript => "livescript",
            NotionCodeLanguage::LlvmIr => "llvm ir",
            NotionCodeLanguage::Lua => "lua",
            NotionCodeLanguage::Makefile => "makefile",
            NotionCodeLanguage::Markdown => "markdown",
            NotionCodeLanguage::Markup => "markup",
            NotionCodeLanguage::Matlab => "matlab",
            NotionCodeLanguage::Mathematica => "mathematica",
            NotionCodeLanguage::Mermaid => "mermaid",
            NotionCodeLanguage::Nix => "nix",
            NotionCodeLanguage::NotionFormula => "notion formula",
            NotionCodeLanguage::ObjectiveC => "objective-c",
            NotionCodeLanguage::Ocaml => "ocaml",
            NotionCodeLanguage::Pascal => "pascal",
            NotionCodeLanguage::Perl => "perl",
            NotionCodeLanguage::Php => "php",
            NotionCodeLanguage::PlainText => "plain text",
            NotionCodeLanguage::Powershell => "powershell",
            NotionCodeLanguage::Prolog => "prolog",
            NotionCodeLanguage::Protobuf => "protobuf",
            NotionCodeLanguage::Purescript => "purescript",
            NotionCodeLanguage::Python => "python",
            NotionCodeLanguage::R => "r",
            NotionCodeLanguage::Racket => "racket",
            NotionCodeLanguage::Reason => "reason",
            NotionCodeLanguage::Ruby => "ruby",
            NotionCodeLanguage::Rust => "rust",
            NotionCodeLanguage::Sass => "sass",
            NotionCodeLanguage::Scala => "scala",
            NotionCodeLanguage::Scheme => "scheme",
            NotionCodeLanguage::Scss => "scss",
            NotionCodeLanguage::Shell => "shell",
            NotionCodeLanguage::Solidity => "solidity",
            NotionCodeLanguage::Sql => "sql",
            NotionCodeLanguage::Swift => "swift",
            NotionCodeLanguage::Toml => "toml",
            NotionCodeLanguage::Typescript => "typescript",
            NotionCodeLanguage::VbNet => "vb.net",
            NotionCodeLanguage::Verilog => "verilog",
            NotionCodeLanguage::Vhdl => "vhdl",
            NotionCodeLanguage::VisualBasic => "visual basic",
            NotionCodeLanguage::Webassembly => "webassembly",
            NotionCodeLanguage::Xml => "xml",
            NotionCodeLanguage::Yaml => "yaml",
            NotionCodeLanguage::JavaCCPlusPlusCSharp => "java/c/c++/c#",
        };
        write!(f, "{}", s)
    }
}

impl FromStr for NotionCodeLanguage {
    type Err = anyhow::Error;

    fn from_str(input: &str) -> Result<NotionCodeLanguage, Self::Err> {
        match input {
            "abap" => Ok(NotionCodeLanguage::Abap),
            "agda" => Ok(NotionCodeLanguage::Agda),
            "arduino" => Ok(NotionCodeLanguage::Arduino),
            "assembly" => Ok(NotionCodeLanguage::Assembly),
            "bash" => Ok(NotionCodeLanguage::Bash),
            "basic" => Ok(NotionCodeLanguage::Basic),
            "bnf" => Ok(NotionCodeLanguage::Bnf),
            "c" => Ok(NotionCodeLanguage::C),
            "c#" => Ok(NotionCodeLanguage::CSharp),
            "c++" => Ok(NotionCodeLanguage::CPlusPlus),
            "clojure" => Ok(NotionCodeLanguage::Clojure),
            "coffeescript" => Ok(NotionCodeLanguage::Coffeescript),
            "coq" => Ok(NotionCodeLanguage::Coq),
            "css" => Ok(NotionCodeLanguage::Css),
            "dart" => Ok(NotionCodeLanguage::Dart),
            "dhall" => Ok(NotionCodeLanguage::Dhall),
            "diff" => Ok(NotionCodeLanguage::Diff),
            "docker" => Ok(NotionCodeLanguage::Docker),
            "ebnf" => Ok(NotionCodeLanguage::Ebnf),
            "elixir" => Ok(NotionCodeLanguage::Elixir),
            "elm" => Ok(NotionCodeLanguage::Elm),
            "erlang" => Ok(NotionCodeLanguage::Erlang),
            "f#" => Ok(NotionCodeLanguage::FSharp),
            "flow" => Ok(NotionCodeLanguage::Flow),
            "fortran" => Ok(NotionCodeLanguage::Fortran),
            "gherkin" => Ok(NotionCodeLanguage::Gherkin),
            "glsl" => Ok(NotionCodeLanguage::Glsl),
            "go" => Ok(NotionCodeLanguage::Go),
            "graphql" => Ok(NotionCodeLanguage::Graphql),
            "groovy" => Ok(NotionCodeLanguage::Groovy),
            "haskell" => Ok(NotionCodeLanguage::Haskell),
            "html" => Ok(NotionCodeLanguage::Html),
            "idris" => Ok(NotionCodeLanguage::Idris),
            "java" => Ok(NotionCodeLanguage::Java),
            "javascript" => Ok(NotionCodeLanguage::Javascript),
            "json" => Ok(NotionCodeLanguage::Json),
            "julia" => Ok(NotionCodeLanguage::Julia),
            "kotlin" => Ok(NotionCodeLanguage::Kotlin),
            "latex" => Ok(NotionCodeLanguage::Latex),
            "less" => Ok(NotionCodeLanguage::Less),
            "lisp" => Ok(NotionCodeLanguage::Lisp),
            "livescript" => Ok(NotionCodeLanguage::Livescript),
            "llvm ir" => Ok(NotionCodeLanguage::LlvmIr),
            "lua" => Ok(NotionCodeLanguage::Lua),
            "makefile" => Ok(NotionCodeLanguage::Makefile),
            "markdown" => Ok(NotionCodeLanguage::Markdown),
            "markup" => Ok(NotionCodeLanguage::Markup),
            "matlab" => Ok(NotionCodeLanguage::Matlab),
            "mathematica" => Ok(NotionCodeLanguage::Mathematica),
            "mermaid" => Ok(NotionCodeLanguage::Mermaid),
            "nix" => Ok(NotionCodeLanguage::Nix),
            "notion formula" => Ok(NotionCodeLanguage::NotionFormula),
            "objective-c" => Ok(NotionCodeLanguage::ObjectiveC),
            "ocaml" => Ok(NotionCodeLanguage::Ocaml),
            "pascal" => Ok(NotionCodeLanguage::Pascal),
            "perl" => Ok(NotionCodeLanguage::Perl),
            "php" => Ok(NotionCodeLanguage::Php),
            "plain text" => Ok(NotionCodeLanguage::PlainText),
            "powershell" => Ok(NotionCodeLanguage::Powershell),
            "prolog" => Ok(NotionCodeLanguage::Prolog),
            "protobuf" => Ok(NotionCodeLanguage::Protobuf),
            "purescript" => Ok(NotionCodeLanguage::Purescript),
            "python" => Ok(NotionCodeLanguage::Python),
            "r" => Ok(NotionCodeLanguage::R),
            "racket" => Ok(NotionCodeLanguage::Racket),
            "reason" => Ok(NotionCodeLanguage::Reason),
            "ruby" => Ok(NotionCodeLanguage::Ruby),
            "rust" => Ok(NotionCodeLanguage::Rust),
            "sass" => Ok(NotionCodeLanguage::Sass),
            "scala" => Ok(NotionCodeLanguage::Scala),
            "scheme" => Ok(NotionCodeLanguage::Scheme),
            "scss" => Ok(NotionCodeLanguage::Scss),
            "shell" => Ok(NotionCodeLanguage::Shell),
            "solidity" => Ok(NotionCodeLanguage::Solidity),
            "sql" => Ok(NotionCodeLanguage::Sql),
            "swift" => Ok(NotionCodeLanguage::Swift),
            "toml" => Ok(NotionCodeLanguage::Toml),
            "typescript" => Ok(NotionCodeLanguage::Typescript),
            "vb.net" => Ok(NotionCodeLanguage::VbNet),
            "verilog" => Ok(NotionCodeLanguage::Verilog),
            "vhdl" => Ok(NotionCodeLanguage::Vhdl),
            "visual basic" => Ok(NotionCodeLanguage::VisualBasic),
            "webassembly" => Ok(NotionCodeLanguage::Webassembly),
            "xml" => Ok(NotionCodeLanguage::Xml),
            "yaml" => Ok(NotionCodeLanguage::Yaml),
            "java/c/c++/c#" => Ok(NotionCodeLanguage::JavaCCPlusPlusCSharp),
            _ => Err(anyhow!("Invalid language: {}", input)),
        }
    }
}
